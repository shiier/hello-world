··面向对象思想设计原则
·接口：简单工厂模式和工厂方法模式
·抽象类：模板设计模式，定义一个算法的骨架，而将具体的实现延迟到子类中实现
·io流：装饰设计模式
·多线程：单例设计模式，确保类在内存中只有一个对象，提高系统性能，没有抽象层，扩展难。
·GUI：适配器模式，将一个类的接口转换成另外一个客户希望的接口。从而使原来不能直接调用的接口变的可以调用。
单一职责原则：高内聚低耦合，每个类应该只有一个职务，对外只提供一种功能，引类变化的原因应该只有一个。
开闭原则：借助抽象和多态，把可能变化的内容抽象出来，从而使得抽象的部分是相对稳定的，而具体的实现则是可以改变和扩展的。
里氏替换原则：在任何负累出现的地方都可以用其子类来替代，即同一个继承体系中的对象应该有共同的行为特征。
依赖注入原则：针对抽象类或者接口编程，而不是针对具体实现编程。
接口分离原则：一个应该只提供一种对外功能，不宜把所有的操作都封装到一个接口中。
迪米特原则：降低各个对象之间的耦合；在模块之间应该只通过接口编程，而不理会模块内部工作原理，降低模块间的耦合。

https://blog.csdn.net/HaydenYu/article/details/73457278静态与非静态的区分
