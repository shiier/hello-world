**集合类** 便于多个对象的操作 集合类有很多种，下面Collection/list/
集合类和数组同是容器，区别在于集合长度可变，只能存储对象，可以是不同类型；数组长度固定可以存储对象和基本数据类型。
（Student[] 对象数组）Object[] toArray()把集合转成对象数组 String再转成字符串
·Collection接口 
创建集合：Collection c = new ArrayList();接口不可以创建对象，右边是接口的实现类对象，利用多态；
·Iterator接口，对Collection进行迭代的迭代器，集合特有的遍历方式，依赖于集合而存在。
Iterator it = c.iterator();
问题：Iterator为什么不定义成类：首先迭代器是集合的遍历方式，而集合类有很多种，由于数据结构不同，每种集合的存储元
素和遍历方式就会不一样，因此需要重写接口的两个方法。
************************************************
The public type must be defined in its own file
翻译：公共类必须被定义在它自己的文件里
产生错误的原因：
1.定义Java类名同文件名不一样
2.一个文件中有多个类，只有与文件名一致的类名，才能声明为：public
内部类不能声明为：public
一个文件中只能有一个public类
*************************************************
？？？？？？？？？？？？？？？？？？
// 创建学生对象元素
Student s1 = new Student("林青霞", 28);
Student s2 = new Student("风清扬", 31);
Student s3 = new Student("林志玲", 18);

// 把元素放到数组中
students[0] = s1;
students[1] = s2;
students[2] = s3;
？？？？？？？？？？？？？？？？？？
？同一个文件中不加public的类和不同文件中加public的类
·List接口：有序的集合，可以对列表中每个元素的插入位置进行精确地控制。允许重复的元素。
List list = new ArrayList();集合创建 遍历可以使用iterator()创建对象,也可以用普通for循环。
·Set接口：无序集合，元素唯一。
·ListIterator接口 列表迭代器 hasNext()和next()方法
通过迭代器去遍历集合的时候，不能在通过集合去操作。
解决方案：
 A:不是用迭代器遍历，用普通for循环遍历,元素添加到了集合的末尾。
 B:使用列表迭代器，遍历使用迭代器，添加也使用迭代器,遍历到哪里，元素就添加到哪里

**常见的数据结构** 栈 队列 数组 链表 树 哈希表
·ArrayList类：底层数据结构是数组，查询快，增删慢，线程不安全，效率高。
 小集合：ArrayList<Elements> name = new ArrayList<Elements>() Elements是数据类型
 大集合：ArrayList<ArrayList<Elements>> name = new ArrayList<ArrayList<Elements>>(); 元素是集合的集合
ArrayList name/name.toString();将集合转化为数组
·Vector类：底层数据结构是数组，线程安全，效率低。多线程使用
·LinkedList类：底层数据结构是链表，查询慢，增删快，线程不安全，效率高。
·Enumeration类：类似于迭代器的方式，hasMoreElements(),nextElement(),
/自己定义集合类——栈/

增强for：简化数组和集合的遍历
for (循环变量类型 循环变量名称 : 要被遍历的对象) {循环体} 循环变量的名称随便写

泛型 参考https://blog.csdn.net/s10461/article/details/53941091
·泛型<?> 就是将类型由原来的具体的类型参数化，然后在使用/调用时传入具体的类型（类型实参）
可以是任意类型，默认情况下就是Object以及任意的Java类了,解决类型转换的问题、
泛型类 public class 类名<泛型类型1,...>
泛型方法 public <泛型类型> 返回类型 方法名(泛型类型 )
泛型接口 public interface 接口名<泛型类型1...>
Collection<? super E> c = new ArrayList<E>();向上限定E及其父类
Collection<? extends E> c = new ArrayList<E>();向下限定E及其子类
Collection<?> c = new ArrayList<E>();
遍历：Iterator<String> it = array.iterator();//等式右边是一个方法，不是类型
·可变参数 格式：修饰符 返回值类型 方法名(数据类型...变量名){}
这里的变量是一个数组，可变参数一定要放在多个参数的最后一个
·HashSet类 底层数据结构是哈希表 元素是链表的数组 保证元素唯一 元素相同默认为统一对象
·LinkedHashSet类 元素有序唯一，由链表保证元素有序，由哈希表保证元素唯一
·TreeSet类 底层数据结构是红黑树（自平衡二叉树）
//自己写用户登陆游戏//
参考：https://blog.csdn.net/vking_wang/article/details/14166593
·哈希表：数组+链表






